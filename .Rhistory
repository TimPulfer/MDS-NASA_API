#'
#' @note This function requires an internet connection to access the NASA API and a valid API key embedded in the function.
#' @export
#'
#' @import httr
#' @import jsonlite
#'
get_mars_rover_image <- function(rover, camera, date) {
base_url <- "https://api.nasa.gov/mars-photos/api/v1/rovers"
full_url <- paste0(base_url, "/", rover, "/photos?earth_date=", date, "&camera=", camera, "&api_key=mzKhYxF0D1G65hbU7LBryQRTsZvzma5No7JsVA4k")
response <- GET(full_url)
if (status_code(response) != 200) {
return("Error in API request")
}
data <- fromJSON(content(response, "text"), flatten = TRUE)
if (nrow(data$photos) > 0) {
return(data$photos$img_src[1])
} else {
return("No image found for the given date and camera")
}
}
# Example usage
img_link <- get_mars_rover_image("curiosity", "fhaz", "2023-01-01")
# Function to connect to the API and check the response
#' @import httr
#' @import jsonlite
get_api_response <- function(rover, camera, date) {
base_url <- "https://api.nasa.gov/mars-photos/api/v1/rovers"
full_url <- paste0(base_url, "/", rover, "/photos?earth_date=", date, "&camera=", camera, "&api_key=mzKhYxF0D1G65hbU7LBryQRTsZvzma5No7JsVA4k")
response <- GET(full_url)
if (status_code(response) != 200) {
stop("Error in API request")
}
return(response)
}
# Function to check the input parameters
check_input <- function(rover, camera, date) {
valid_rovers <- c("curiosity", "opportunity", "spirit")
if (!rover %in% valid_rovers) {
stop("Invalid rover name")
}
# Add more checks here if needed, e.g., for camera codes and date format
return(TRUE)
}
# Main function that uses the previous two functions
get_mars_rover_image_url <- function(rover, camera, date) {
# Check input validity
check_input(rover, camera, date)
# Get the API response
response <- get_api_response(rover, camera, date)
# Parse the response
data <- fromJSON(content(response, "text"), flatten = TRUE)
if (nrow(data$photos) > 0) {
return(data$photos$img_src[1])
} else {
return("No image found for the given date and camera")
}
}
# Example usage
img_link <- get_mars_rover_image_url("curiosity", "fhaz", "2023-01-01")
# Function to connect to the API and check the response
library(httr)
get_api_response <- function(rover, camera, date) {
base_url <- "https://api.nasa.gov/mars-photos/api/v1/rovers"
full_url <- paste0(base_url, "/", rover, "/photos?earth_date=", date, "&camera=", camera, "&api_key=mzKhYxF0D1G65hbU7LBryQRTsZvzma5No7JsVA4k")
response <- GET(full_url)
if (status_code(response) != 200) {
stop("Error in API request")
}
return(response)
}
# Function to check the input parameters
check_input <- function(rover, camera, date) {
valid_rovers <- c("curiosity", "opportunity", "spirit")
if (!rover %in% valid_rovers) {
stop("Invalid rover name")
}
# Add more checks here if needed, e.g., for camera codes and date format
return(TRUE)
}
# Main function that uses the previous two functions
get_mars_rover_image_url <- function(rover, camera, date) {
# Check input validity
check_input(rover, camera, date)
# Get the API response
response <- get_api_response(rover, camera, date)
# Parse the response
data <- fromJSON(content(response, "text"), flatten = TRUE)
if (nrow(data$photos) > 0) {
return(data$photos$img_src[1])
} else {
return("No image found for the given date and camera")
}
}
# Example usage
img_link <- get_mars_rover_image_url("curiosity", "fhaz", "2023-01-01")
# Function to connect to the API and check the response
library(httr)
library(jsonlite)
get_api_response <- function(rover, camera, date) {
base_url <- "https://api.nasa.gov/mars-photos/api/v1/rovers"
full_url <- paste0(base_url, "/", rover, "/photos?earth_date=", date, "&camera=", camera, "&api_key=mzKhYxF0D1G65hbU7LBryQRTsZvzma5No7JsVA4k")
response <- GET(full_url)
if (status_code(response) != 200) {
stop("Error in API request")
}
return(response)
}
# Function to check the input parameters
check_input <- function(rover, camera, date) {
valid_rovers <- c("curiosity", "opportunity", "spirit")
if (!rover %in% valid_rovers) {
stop("Invalid rover name")
}
# Add more checks here if needed, e.g., for camera codes and date format
return(TRUE)
}
# Main function that uses the previous two functions
get_mars_rover_image_url <- function(rover, camera, date) {
# Check input validity
check_input(rover, camera, date)
# Get the API response
response <- get_api_response(rover, camera, date)
# Parse the response
data <- fromJSON(content(response, "text"), flatten = TRUE)
if (nrow(data$photos) > 0) {
return(data$photos$img_src[1])
} else {
return("No image found for the given date and camera")
}
}
# Example usage
img_link <- get_mars_rover_image_url("curiosity", "fhaz", "2023-01-01")
print(img_link)
library(testthat)
source("neo_function_wrapper.R")
install.packages("roxygen2")
library(testthat)
source("neo_function_wrapper.R")
# check_date function test cases
test_that("Valid date range returns PASS", {
result <- check_date('2023-01-01', '2023-01-07')
expect_equal(result, 'PASS')
})
test_that("Date range with difference > 7 days returns 7_d_fail", {
result <- check_date('2023-01-01', '2023-01-15')
expect_equal(result, '7_d_fail')
})
test_that("Date range with difference = 7 days returns PASS", {
result <- check_date('2023-01-01', '2023-01-08')
expect_equal(result, 'PASS')
})
test_that("Date range with difference < 7 days returns PASS", {
result <- check_date('2023-01-01', '2023-01-06')
expect_equal(result, 'PASS')
})
# get_response test cases
test_that("Valid API response returns status code 200", {
response <- get_response('2023-01-01', '2023-01-07')
expect_equal(response$status_code, 200)
})
test_that("Invalid date range returns status code not 200", {
response <- get_response('2023-01-15', '2023-01-25')
expect_equal(response, 'Response status code not 200')
})
# get_plot test case
test_that("get_plot generates a ggplot object", {
response <- get_response('2023-01-01', '2023-01-07')
data <- fromJSON(response$url)
plot <- get_plot(data)
expect_is(plot, "gg")
})
# get_neo functiont tests
test_that("get_neo returns a ggplot object for a valid date range", {
get_plot <- function(data) {
return(ggplot2::ggplot() + ggplot2::geom_point())  # Stubbing, as we are focusing on testing get_neo
}
result <- get_neo('2023-01-01', '2023-01-07')
expect_true(inherits(result, 'gg'))
})
library(testthat)
source("neo_function_wrapper.R")
source("rover_images_wrapper_module.r")
# check_date function test cases
test_that("Valid date range returns PASS", {
result <- check_date('2023-01-01', '2023-01-07')
expect_equal(result, 'PASS')
})
test_that("Date range with difference > 7 days returns 7_d_fail", {
result <- check_date('2023-01-01', '2023-01-15')
expect_equal(result, '7_d_fail')
})
test_that("Date range with difference = 7 days returns PASS", {
result <- check_date('2023-01-01', '2023-01-08')
expect_equal(result, 'PASS')
})
test_that("Date range with difference < 7 days returns PASS", {
result <- check_date('2023-01-01', '2023-01-06')
expect_equal(result, 'PASS')
})
# get_response test cases
test_that("Valid API response returns status code 200", {
response <- get_response('2023-01-01', '2023-01-07')
expect_equal(response$status_code, 200)
})
test_that("Invalid date range returns status code not 200", {
response <- get_response('2023-01-15', '2023-01-25')
expect_equal(response, 'Response status code not 200')
})
# get_plot test case
test_that("get_plot generates a ggplot object", {
response <- get_response('2023-01-01', '2023-01-07')
data <- fromJSON(response$url)
plot <- get_plot(data)
expect_is(plot, "gg")
})
# get_neo functiont tests
test_that("get_neo returns a ggplot object for a valid date range", {
get_plot <- function(data) {
return(ggplot2::ggplot() + ggplot2::geom_point())  # Stubbing, as we are focusing on testing get_neo
}
result <- get_neo('2023-01-01', '2023-01-07')
expect_true(inherits(result, 'gg'))
})
library(testthat)
source("neo_function_wrapper.R")
source("rover_images_wrapper_module.r")
# check_date function test cases
test_that("Valid date range returns PASS", {
result <- check_date('2023-01-01', '2023-01-07')
expect_equal(result, 'PASS')
})
test_that("Date range with difference > 7 days returns 7_d_fail", {
result <- check_date('2023-01-01', '2023-01-15')
expect_equal(result, '7_d_fail')
})
test_that("Date range with difference = 7 days returns PASS", {
result <- check_date('2023-01-01', '2023-01-08')
expect_equal(result, 'PASS')
})
test_that("Date range with difference < 7 days returns PASS", {
result <- check_date('2023-01-01', '2023-01-06')
expect_equal(result, 'PASS')
})
# get_response test cases
test_that("Valid API response returns status code 200", {
response <- get_response('2023-01-01', '2023-01-07')
expect_equal(response$status_code, 200)
})
test_that("Invalid date range returns status code not 200", {
response <- get_response('2023-01-15', '2023-01-25')
expect_equal(response, 'Response status code not 200')
})
# get_plot test case
test_that("get_plot generates a ggplot object", {
response <- get_response('2023-01-01', '2023-01-07')
data <- fromJSON(response$url)
plot <- get_plot(data)
expect_is(plot, "gg")
})
# get_neo functiont tests
test_that("get_neo returns a ggplot object for a valid date range", {
get_plot <- function(data) {
return(ggplot2::ggplot() + ggplot2::geom_point())  # Stubbing, as we are focusing on testing get_neo
}
result <- get_neo('2023-01-01', '2023-01-07')
expect_true(inherits(result, 'gg'))
})
test_that("check_input returns TRUE for valid inputs", {
expect_true(check_input("curiosity", "fhaz", "2023-01-01"))
})
test_that("check_input stops for invalid rover name", {
expect_error(check_input("invalid_rover", "fhaz", "2023-01-01"), "Invalid rover name")
})
library(testthat)
source("neo_function_wrapper.R")
source("rover_images_wrapper_module.r")
# check_date function test cases
test_that("Valid date range returns PASS", {
result <- check_date('2023-01-01', '2023-01-07')
expect_equal(result, 'PASS')
})
test_that("Date range with difference > 7 days returns 7_d_fail", {
result <- check_date('2023-01-01', '2023-01-15')
expect_equal(result, '7_d_fail')
})
test_that("Date range with difference = 7 days returns PASS", {
result <- check_date('2023-01-01', '2023-01-08')
expect_equal(result, 'PASS')
})
test_that("Date range with difference < 7 days returns PASS", {
result <- check_date('2023-01-01', '2023-01-06')
expect_equal(result, 'PASS')
})
# get_response test cases
test_that("Valid API response returns status code 200", {
response <- get_response('2023-01-01', '2023-01-07')
expect_equal(response$status_code, 200)
})
test_that("Invalid date range returns status code not 200", {
response <- get_response('2023-01-15', '2023-01-25')
expect_equal(response, 'Response status code not 200')
})
# get_plot test case
test_that("get_plot generates a ggplot object", {
response <- get_response('2023-01-01', '2023-01-07')
data <- fromJSON(response$url)
plot <- get_plot(data)
expect_is(plot, "gg")
})
# get_neo functiont tests
test_that("get_neo returns a ggplot object for a valid date range", {
get_plot <- function(data) {
return(ggplot2::ggplot() + ggplot2::geom_point())  # Stubbing, as we are focusing on testing get_neo
}
result <- get_neo('2023-01-01', '2023-01-07')
expect_true(inherits(result, 'gg'))
})
test_that("check_input returns TRUE for valid inputs", {
expect_true(check_input("curiosity", "fhaz", "2023-01-01"))
})
test_that("check_input stops for invalid rover name", {
expect_error(check_input("invalid_rover", "fhaz", "2023-01-01"), "Invalid rover name")
})
test_that("get_api_response returns a response object for valid inputs", {
response <- get_api_response("curiosity", "fhaz", "2023-01-01")
expect_true(inherits(response, "response"))
expect_equal(status_code(response), 200)
})
test_that("get_api_response stops with an error for invalid API request", {
expect_error(get_api_response("curiosity", "invalid_camera", "2023-01-01"))
})
library(testthat)
source("neo_function_wrapper.R")
source("rover_images_wrapper_module.r")
# check_date function test cases
test_that("Valid date range returns PASS", {
result <- check_date('2023-01-01', '2023-01-07')
expect_equal(result, 'PASS')
})
test_that("Date range with difference > 7 days returns 7_d_fail", {
result <- check_date('2023-01-01', '2023-01-15')
expect_equal(result, '7_d_fail')
})
test_that("Date range with difference = 7 days returns PASS", {
result <- check_date('2023-01-01', '2023-01-08')
expect_equal(result, 'PASS')
})
test_that("Date range with difference < 7 days returns PASS", {
result <- check_date('2023-01-01', '2023-01-06')
expect_equal(result, 'PASS')
})
# get_response test cases
test_that("Valid API response returns status code 200", {
response <- get_response('2023-01-01', '2023-01-07')
expect_equal(response$status_code, 200)
})
test_that("Invalid date range returns status code not 200", {
response <- get_response('2023-01-15', '2023-01-25')
expect_equal(response, 'Response status code not 200')
})
# get_plot test case
test_that("get_plot generates a ggplot object", {
response <- get_response('2023-01-01', '2023-01-07')
data <- fromJSON(response$url)
plot <- get_plot(data)
expect_is(plot, "gg")
})
# get_neo functiont tests
test_that("get_neo returns a ggplot object for a valid date range", {
get_plot <- function(data) {
return(ggplot2::ggplot() + ggplot2::geom_point())  # Stubbing, as we are focusing on testing get_neo
}
result <- get_neo('2023-01-01', '2023-01-07')
expect_true(inherits(result, 'gg'))
})
test_that("check_input returns TRUE for valid inputs", {
expect_true(check_input("curiosity", "fhaz", "2023-01-01"))
})
test_that("check_input stops for invalid rover name", {
expect_error(check_input("invalid_rover", "fhaz", "2023-01-01"), "Invalid rover name")
})
test_that("get_api_response returns a response object for valid inputs", {
response <- get_api_response("curiosity", "fhaz", "2023-01-01")
expect_true(inherits(response, "response"))
expect_equal(status_code(response), 200)
})
test_that("get_api_response stops with an error for invalid API request", {
expect_error(get_api_response("curiosity", "invalid_camera", "2023-01-01"))
})
library(testthat)
source("neo_function_wrapper.R")
source("rover_images_wrapper_module.r")
# check_date function test cases
test_that("Valid date range returns PASS", {
result <- check_date('2023-01-01', '2023-01-07')
expect_equal(result, 'PASS')
})
test_that("Date range with difference > 7 days returns 7_d_fail", {
result <- check_date('2023-01-01', '2023-01-15')
expect_equal(result, '7_d_fail')
})
test_that("Date range with difference = 7 days returns PASS", {
result <- check_date('2023-01-01', '2023-01-08')
expect_equal(result, 'PASS')
})
test_that("Date range with difference < 7 days returns PASS", {
result <- check_date('2023-01-01', '2023-01-06')
expect_equal(result, 'PASS')
})
# get_response test cases
test_that("Valid API response returns status code 200", {
response <- get_response('2023-01-01', '2023-01-07')
expect_equal(response$status_code, 200)
})
test_that("Invalid date range returns status code not 200", {
response <- get_response('2023-01-15', '2023-01-25')
expect_equal(response, 'Response status code not 200')
})
# get_plot test case
test_that("get_plot generates a ggplot object", {
response <- get_response('2023-01-01', '2023-01-07')
data <- fromJSON(response$url)
plot <- get_plot(data)
expect_is(plot, "gg")
})
# get_neo functiont tests
test_that("get_neo returns a ggplot object for a valid date range", {
get_plot <- function(data) {
return(ggplot2::ggplot() + ggplot2::geom_point())  # Stubbing, as we are focusing on testing get_neo
}
result <- get_neo('2023-01-01', '2023-01-07')
expect_true(inherits(result, 'gg'))
})
test_that("check_input returns TRUE for valid inputs", {
expect_true(check_input("curiosity", "fhaz", "2023-01-01"))
})
test_that("check_input stops for invalid rover name", {
expect_error(check_input("invalid_rover", "fhaz", "2023-01-01"), "Invalid rover name")
})
test_that("get_api_response returns a response object for valid inputs", {
response <- get_api_response("curiosity", "fhaz", "2023-01-01")
expect_true(inherits(response, "response"))
expect_equal(status_code(response), 200)
})
test_that("get_mars_rover_image_url returns a URL for valid inputs", {
url <- get_mars_rover_image_url("curiosity", "fhaz", "2023-01-01")
expect_true(grepl("http", url))
})
test_that("get_mars_rover_image_url returns an error message for no image found", {
message <- get_mars_rover_image_url("curiosity", "fhaz", "1900-01-01") # Assuming no images on this date
expect_equal(message, "No image found for the given date and camera")
})
library(testthat)
source("neo_function_wrapper.R")
source("rover_images_wrapper_module.r")
# check_date function test cases
test_that("Valid date range returns PASS", {
result <- check_date('2023-01-01', '2023-01-07')
expect_equal(result, 'PASS')
})
test_that("Date range with difference > 7 days returns 7_d_fail", {
result <- check_date('2023-01-01', '2023-01-15')
expect_equal(result, '7_d_fail')
})
test_that("Date range with difference = 7 days returns PASS", {
result <- check_date('2023-01-01', '2023-01-08')
expect_equal(result, 'PASS')
})
test_that("Date range with difference < 7 days returns PASS", {
result <- check_date('2023-01-01', '2023-01-06')
expect_equal(result, 'PASS')
})
# get_response test cases
test_that("Valid API response returns status code 200", {
response <- get_response('2023-01-01', '2023-01-07')
expect_equal(response$status_code, 200)
})
test_that("Invalid date range returns status code not 200", {
response <- get_response('2023-01-15', '2023-01-25')
expect_equal(response, 'Response status code not 200')
})
# get_plot test case
test_that("get_plot generates a ggplot object", {
response <- get_response('2023-01-01', '2023-01-07')
data <- fromJSON(response$url)
plot <- get_plot(data)
expect_is(plot, "gg")
})
# get_neo functiont tests
test_that("get_neo returns a ggplot object for a valid date range", {
get_plot <- function(data) {
return(ggplot2::ggplot() + ggplot2::geom_point())  # Stubbing, as we are focusing on testing get_neo
}
result <- get_neo('2023-01-01', '2023-01-07')
expect_true(inherits(result, 'gg'))
})
test_that("check_input returns TRUE for valid inputs", {
expect_true(check_input("curiosity", "fhaz", "2023-01-01"))
})
test_that("check_input stops for invalid rover name", {
expect_error(check_input("invalid_rover", "fhaz", "2023-01-01"), "Invalid rover name")
})
test_that("get_api_response returns a response object for valid inputs", {
response <- get_api_response("curiosity", "fhaz", "2023-01-01")
expect_true(inherits(response, "response"))
expect_equal(status_code(response), 200)
})
test_that("get_mars_rover_image_url returns a URL for valid inputs", {
url <- get_mars_rover_image_url("curiosity", "fhaz", "2023-01-01")
expect_true(grepl("http", url))
})
